<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Siebel to Salesforce Account Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
I want to synchronize accounts from Oracle Siebel Business Objects to Salesforce instance.

This template should serve as a foundation for the process of migrating accounts from Oracle 
Siebel Business Objects to Salesforce instance, being able to specify filtering criteria and 
desired behavior when an account already exists in the Salesforce. 

As implemented, this template leverages the Mule batch module.

The batch job is divided into *Process* and *On Complete* stages.

The migration process starts with querying Siebel for all the existing Accounts that match the filter criteria.
During the *Process* stage, each Account is filtered depending on existence of matching account in the Salesforce.
The last step of the *Process* stage groups the accounts and creates or updates them in Salesforce.
Finally during the *On Complete* stage the Template outputs statistics data into the console and sends 
a notification email with the results of the batch execution. 
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. 
All of them deal with the preparations in both, that must be made in order for all to run smoothly. 
Failing to do so can lead to unexpected behavior of the template.
]]>
		</section>
		<section id="sieb_src">
		<![CDATA[
In order to make the Siebel connector work smoothly you have to provide the correct version of the 
Siebel JAR files that works with your Siebel installation. 
[See more](https://docs.mulesoft.com/connectors/siebel-connector#prerequisites).
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, if you choose the `sieb2sfdcaccountmigration` domain name,
to trigger the use case browse to `http://sieb2sfdcaccountmigration.cloudhub.io/migrateaccounts` 
and the report ise sent to the emails you configured.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 
+ page.size `200`

**Salesforce Connector Configuration**
+ sfdc.username `joan.baez@org`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`

**Oracle Siebel Business Objects Connector Configuration**
+ sieb.user `SADMIN`
+ sieb.password `SADMIN`
+ sieb.server `192.168.10.8`
+ sieb.serverName `SBA_82`
+ sieb.objectManager `EAIObjMgr_enu`
+ sieb.port `2321`

**SMTP Services Configuration**
+ smtp.host `some.host`
+ smtp.port `587`
+ smtp.user `email%40example.com`
+ smtp.password `password`

**EMail Details**
+ mail.from `batch.migrateaccounts.migration%40mulesoft.com`
+ mail.to `test@gmail.com`
+ mail.subject `Batch Job Finished Report`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount 
may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***X + X / ${page.size}***

***X*** is the number of Accounts to be synchronized on each run. 

Divide by ***${page.size}*** because by default, accounts are gathered in groups of ${page.size} for each Upsert API Call in the aggregation step. 

For instance if 10 records are fetched from origin instance, then 11 API calls are made to Salesforce (10 + 1).
]]>
		</section>
<section id="default_endpoints_xml">
        <![CDATA[
This is the file where you find the inbound and outbound sides of your integration app.
This template has only an HTTP Listener connector as the way to trigger the use case.
**HTTP Listener Connector** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migrateaccounts` that you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub routes requests from your application domain URL to the endpoint.
+ The endpoint is a *request-response* and a result of calling it is the response with the total records fetched by the criteria specified.
]]>
        </section>
        <section id="default_business_logic_xml">
        <![CDATA[
The functional aspect of this template e is implemented on this XML, directed by one flow responsible of excecuting the logic.
For the pourpose of this template, the *mainFlow* excecutes a batch job that handles all its logic.
This flow has an exception strategy that basically consists on invoking the *defaultChoiseExceptionStrategy* defined in the *errorHandling.xml* file.
]]>
        </section>
	</sections>
</configuration>
